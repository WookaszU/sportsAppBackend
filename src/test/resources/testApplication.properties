# Active spring profile
spring.profiles.active=test

# DataSource settings: set here your own configurations for the database
# connection. In this example we have "netgloo_blog" as database name and
# "root" as username and password.

# MySQL config - db local               //      BELOW change hibernate dialect to MySQL
#spring.datasource.url=jdbc:mysql://localhost:3306/sportsapp?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
#spring.datasource.username=appuser
#spring.datasource.password=appuser

# Postgres config - db hosted on heroku //      BELOW change hibernate dialect to Postgre
spring.datasource.url=jdbc:postgresql://localhost:5432/test
spring.datasource.username=postgres
spring.datasource.password=postgres

spring.output.ansi.enabled = ALWAYS

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation = true
# Keep the connection alive if idle for a long time (needed in production)
# spring.datasource.testWhileIdle = true
# spring.datasource.validationQuery = SELECT 1
# Show or not log for each sql query
spring.jpa.generate-ddl=true
#spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto=create
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)
# The SQL dialect makes Hibernate generate better SQL for the chosen database
# MySQL
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
# Postgres
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Email settings, email set to gmail
spring.mail.host=smtp.gmail.com
spring.mail.port=587

app.mail.registertitle=Confirm your SportsApp account.

spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB

app.files.photo.profile.max-size=1048576
app.files.photo.event.max-size=1048576

# log to jdbc:h2:mem:testdb
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

